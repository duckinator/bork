# Allow compute credits usage for collaborators and anything pushed to the
# main, staging, and trying branches. (So bors can use them.)
use_compute_credits: $CIRRUS_USER_COLLABORATOR == 'true' || $CIRRUS_BRANCH == 'main' || $CIRRUS_BRANCH == 'staging' || $CIRRUS_BRANCH == 'trying'

# This makes Click behave itself.
env:
  LC_ALL: C.UTF-8
  LANG: C.UTF-8

Lint_task:
  container:
    image: python:3.11-slim
  install_script:
    - pip install -U --upgrade-strategy eager pip 'setuptools>42'
    - pip install .
    - pip install .[testing]
  script:
    - pylint --version
    - bork run lint

Zipapp_bootstrap_task:
  alias: Zipapp bootstraps
  container:
    matrix:
      image: python:3.7-slim
      image: python:3.8-slim
      image: python:3.9-slim
      image: python:3.10-slim
      image: python:3.11-slim
  setup_script:
    - pip install -U --upgrade-strategy eager pip 'setuptools>42'
    - cp -r . /tmp/bork-pristine
    - cp -r /tmp/bork-pristine /tmp/pass1
    - cp -r /tmp/bork-pristine /tmp/pass2
    - cp -r /tmp/bork-pristine /tmp/pass3
  # Make sure Bork can build itself.
  pass_1_script:
    - cd /tmp/pass1
    - python3 --version
    - pip install . .[testing]
    - bork build
  # Make sure the Bork zipapp from Pass 1 can build Bork.
  pass_2_script:
    - cd /tmp/pass2
    - cp /tmp/pass1/dist/bork-*.pyz /tmp/bork-pass1.pyz
    - python3 /tmp/bork-pass1.pyz build
  # Make sure the Bork zipapp built from Pass 2 can build Bork.
  # ime with other self-building software, this is prone to blowing up.
  pass_3_script:
    - cd /tmp/pass3
    - cp /tmp/pass2/dist/bork-*.pyz /tmp/bork-pass2.pyz
    - python3 /tmp/bork-pass2.pyz build
    - '[ -e ./dist/bork-*.pyz ]'


Linux_task:
  alias: Linux tests
  container:
    matrix:
      - image: python:3.7-slim
      - image: python:3.8-slim
      - image: python:3.9-slim
      - image: python:3.10-slim
      - image: python:3.11-slim
  install_script:
    - apt-get update
    - apt-get install -y git
    - pip install -U --upgrade-strategy eager pip 'setuptools>42'
    - pip install . .[testing]
  script:
    - python3 --version
    - bork run test

macOS_task:
  alias: macOS tests
  osx_instance:
    image: monterey-xcode
  env:
    LC_ALL: en_US.UTF-8
    LANG: en_US.UTF-8
    PATH: ${HOME}/.pyenv/shims:${PATH}
    matrix:
      # https://formulae.brew.sh/formula/python@3.10
      - PYTHON: 3.7.12
      - PYTHON: 3.8.12
      - PYTHON: 3.9.8
      - PYTHON: 3.10.0
  brew_update_script:
    - brew update
  brew_install_script:
    # Per the pyenv homebrew recommendations.
    #  https://github.com/pyenv/pyenv/wiki#suggested-build-environment
    - brew install openssl readline sqlite3 xz zlib pyenv git
  pyenv_install_script:
    - pyenv install ${PYTHON}
    - pyenv global ${PYTHON}
    - pyenv rehash
  pip_install_script:
    - pip install -U --upgrade-strategy eager pip 'setuptools>42'
    - pip install -e .[testing]
  script:
    - python3 --version
    - bork run test

FreeBSD_task:
  alias: FreeBSD tests
  freebsd_instance:
    image_family: freebsd-12-2
  env:
    matrix:
      - PYTHON: 3.7
      - PYTHON: 3.8
      - PYTHON: 3.9
      - PYTHON: 3.10
      - PYTHON: 3.11
  install_script:
    - PY=`echo $PYTHON | tr -d '.'`
    - pkg install -y python${PY} git
    - python${PYTHON} -m ensurepip
    - python${PYTHON} -m pip install -U --upgrade-strategy eager pip 'setuptools>42'
    - python${PYTHON} -m pip install -e .[testing_only]
  script:
    - python${PYTHON} --version
    - bork run test

Windows_task:
  allow_failures: $CIRRUS_TASK_NAME =~ '.*-rc-.*'
  windows_container:
    os_version: 2019
    matrix:
      - image: python:3.7-windowsservercore-ltsc2022
      - image: python:3.8-windowsservercore-ltsc2022
      - image: python:3.9-windowsservercore-ltsc2022
      - image: python:3.10-windowsservercore-ltsc2022
      - image: python:3.11-windowsservercore-ltsc2022
  install_script:
    - C:\Python\python.exe -m pip install -e .[testing]
  version_info_script:
    - C:\Python\python.exe --version
  # NOTE: The current configuration for `bork lint` doesn't play nice
  #       with the Windows command prompt, because it doesn't support
  #       quoted arguments. (E.g. `-k 'pylint or mypy'`)
  pylint_script:
    - C:\Python\python.exe -m pytest -k pylint --pylint --verbose
  mypy_script:
    - C:\Python\python.exe -m pytest -k mypy --mypy --verbose
  test_script:
    - C:\Python\python.exe -m pytest --verbose

success_task:
  name: CI success
  container: {image: "busybox"}
  depends_on:
    - FreeBSD tests
    - Linux tests
    - macOS tests
    - Zipapp bootstraps
    - Lint
    - Windows

# If bork/version.py is modified on the main branch, make a release.
Release_task:
  only_if: "changesInclude('bork/version.py') && $BRANCH == 'main' && $CIRRUS_CRON == ''"
  depends_on: [CI success]
  env:
    TWINE_USERNAME: "__token__"
    TWINE_PASSWORD: ENCRYPTED[00007524e18bea7b59efea288653efa57b1dbd235ed8af00cc325febfc9076631a2bf58ed330d8fa7ca057adb81579b0]
    BORK_GITHUB_TOKEN: ENCRYPTED[cc80f90b8db1cbe53aabf4f50bf73331c88ea3e1b5412bb0f7bc264bd233f23bf8df4fc2b4c41f87ec07310d63619801]
  container:
    image: python:3.11-slim
  install_script:
    - apt-get update
    - apt-get install -y git
    - pip install -U --upgrade-strategy eager pip 'setuptools>42'
    - pip3 install . .[testing]
  build_script:
    - bork clean
    - bork build
  test_script:
    - bork run test
  release_script:
    - bork release

# If there's a new tag, which should only happen after a successful release
# to PyPi, publish an image on Docker Hub.
docker_builder:
  only_if: $CIRRUS_TAG != ''
  name: "Release on Docker Hub"
  depends_on:
    - Release
  env:
    DOCKER_USERNAME: ENCRYPTED[a957943032559f0859a16a4421bc3602338080e6d9ce63a980db4fd34dbdc2afbe3a20c620139c669182eced4211a515]
    DOCKER_PASSWORD: ENCRYPTED[dd7f31d490b645298258ac9ec78ac3a7e034e8bfcf8fbfec0137787eef3934e01a42ef3b5eda42b1b1f7a3296fae619e]
  delay_script: sleep 10 # Attempt to ensure it is available via pip.
  build_script:
    - docker build --tag duckinator/bork:${CIRRUS_TAG} --tag duckinator/bork:latest --build-arg "VERSION=$(echo $CIRRUS_TAG | sed 's/^v//')" .
  login_script: docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
  push_tag_script: docker push duckinator/bork:$CIRRUS_TAG
  push_latest_script:
    - if grep -qE "^__version__\s+=\s+['\"]([0-9.]+)['\"]$" bork/version.py; then docker push duckinator/bork:latest; fi

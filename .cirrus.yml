# Allow compute credits usage for collaborators and anything pushed to the
# master, staging, and trying branches. (So bors can use them.)
use_compute_credits: $CIRRUS_USER_COLLABORATOR == 'true' || $CIRRUS_BRANCH == 'master' || $CIRRUS_BRANCH == 'staging' || $CIRRUS_BRANCH == 'trying'

# This makes Click behave itself.
env:
  LC_ALL: C.UTF-8
  LANG: C.UTF-8

Lint_task:
  container:
    image: python:3-slim
  install_script:
    - pip install .
    - pip install .[testing]
  script:
    - flake8 --version
    - pylint --version
    - bork run lint

Zipapp_bootstrap_task:
  container:
    matrix:
      image: python:3.7-slim
      image: python:3.8-slim
  setup_script:
    - cp -r . /tmp/bork-pristine
    - cp -r /tmp/bork-pristine /tmp/pass1
    - cp -r /tmp/bork-pristine /tmp/pass2
    - cp -r /tmp/bork-pristine /tmp/pass3
  # Make sure Bork can build itself.
  pass_1_script:
    - cd /tmp/pass1
    - python3 --version
    - pip install . .[testing]
    - bork build
  # Make sure the Bork zipapp from Pass 1 can build Bork.
  pass_2_script:
    - cd /tmp/pass2
    - cp /tmp/pass1/dist/bork-*.pyz /tmp/bork-pass1.pyz
    - python3 /tmp/bork-pass1.pyz build
  # Make sure the Bork zipapp built from Pass 2 can build Bork.
  # ime with other self-building software, this is prone to blowing up.
  pass_3_script:
    - cd /tmp/pass3
    - cp /tmp/pass2/dist/bork-*.pyz /tmp/bork-pass2.pyz
    - python3 /tmp/bork-pass2.pyz build
    - cp ./dist/bork-*.pyz /tmp/bork-pass3.pyz
    - python3 /tmp/bork-pass3.pyz run lint

# Linux_task:
#   allow_failures: $CIRRUS_TASK_NAME =~ '.*-rc-.*'
#   container:
#     matrix:
#       - image: python:3.5-slim
#       - image: python:3.6-slim
#       - image: python:3.7-slim
#       - image: python:3.8-rc-slim
#   install_script:
#     - pip install -e .[testing]
#   script:
#     - python3 --version
#     - python3 -m pytest --verbose

# macOS_task:
#   osx_instance:
#     image: mojave-base
#   env:
#     PATH: ${HOME}/.pyenv/shims:${PATH}
#     matrix:
#       - PYTHON: 3.6.8
#       - PYTHON: 3.7.2
#   install_script:
#     # Per the pyenv homebrew recommendations.
#     # https://github.com/pyenv/pyenv/wiki#suggested-build-environment
#     - sudo installer -pkg /Library/Developer/CommandLineTools/Packages/macOS_SDK_headers_for_macOS_10.14.pkg -target /
#     - brew install openssl readline pyenv
#     - pyenv install ${PYTHON}
#     - pyenv global ${PYTHON}
#     - pyenv rehash
#     - pip install -e .[testing]
#   script:
#     - python3 --version
#     - python3 -m pytest --verbose

# FreeBSD_task:
#   freebsd_instance:
#     image: freebsd-12-0-release-amd64
#   env:
#     matrix:
#       - PYTHON: 3.6
#       - PYTHON: 3.7
#   install_script:
#     - PY=`echo $PYTHON | tr -d '.'`
#     - pkg install -y python${PY} py${PY}-setuptools
#     - python${PYTHON} -m ensurepip
#     - python${PYTHON} -m pip install -e .[testing]
#   script:
#     - python${PYTHON} --version
#     - python${PYTHON} -m pytest --verbose

# Windows_task:
#   allow_failures: $CIRRUS_TASK_NAME =~ '.*-rc-.*'
#   windows_container:
#     os_version: 2019
#     matrix:
#       - image: python:3.6-windowsservercore-1809
#       - image: python:3.7-windowsservercore-1809
#       - image: python:3.8-rc-windowsservercore-1809

#   install_script:
#     - C:\Python\python.exe -m pip install -e .[testing]
#   script:
#     - C:\Python\python.exe --version
#     - C:\Python\python.exe -m pytest --verbose

downloads_task:
  container:
    image: python:3-slim
  env:
    LC_ALL: C.UTF-8
    LANG: C.UTF-8
  install_script:
    - apt-get update
    - apt-get install -y file
    - pip3 install .
  script:
    # Download a pyz file from GitHub, saved to ./downloads
    - bork download gh:duckinator/emanate v7.0.0
    - python3 ./downloads/emanate-7.0.0.pyz --help | head -n 1
    # Download a pyz file for a specific version from GitHub, saved to ./bin
    - bork download gh:duckinator/emanate v7.0.0 --directory bin/
    - python3 bin/emanate-7.0.0.pyz --help | head -n 1
    # Download a .tar.gz file from GitHub, saved to ./downloads
    - bork download gh:ppb/pursuedpybear v0.6.0 --files '*.tar.gz' --directory downloads
    - test "$(file downloads/ppb-0.6.0.tar.gz | cut -d ' ' -f 2)" == 'gzip'
    # Download a .whl file from PyPi.
    - bork download pypi:emanate v6.0.0 --files '*.whl'
    - test "$(file downloads/emanate-6.0.0-py3-none-any.whl | cut -d ' ' -f 2)" == 'Zip'
    # Download a .whl file from PyPi's test instance.
    - bork download pypi-test:whaledo 1.0.1 --files '*.whl'
    - test "$(file downloads/whaledo-1.0.1-py3-none-any.whl | cut -d ' ' -f 2)" == 'Zip'


repos_task:
  container:
    image: python:3-slim
  env:
    LC_ALL: C.UTF-8
    LANG: C.UTF-8
    matrix:
      - REPO: https://github.com/ppb/ppb-vector.git
      - REPO: https://github.com/duckinator/emanate.git
      - REPO: https://github.com/duckinator/bork.git
      - REPO: https://github.com/astronouth7303/ppb-mutant.git
  install_script:
    - apt-get update
    - apt-get install -y git
    - pip3 install .
  script:
    - git clone $REPO /tmp/repo
    - cd /tmp/repo
    - bork clean
    - bork build
    - bork release --dry-run
